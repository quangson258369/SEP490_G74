// <auto-generated />
using System;
using HCS.ApplicationContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HCS.ApplicationContext.Migrations
{
    [DbContext(typeof(HCSContext))]
    [Migration("20240110082714_addIsDeletedFields")]
    partial class addIsDeletedFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HCS.Domain.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Nội khoa",
                            IsDeleted = false
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Ngoại khoa",
                            IsDeleted = false
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Khoa thần kinh",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("HCS.Domain.Models.Contact", b =>
                {
                    b.Property<int>("CId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CId");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            CId = 1,
                            Address = "Ha Noi",
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = false,
                            Img = "",
                            Name = "Admin Khoa",
                            Phone = "0987662512"
                        },
                        new
                        {
                            CId = 2,
                            Address = "Ha Noi",
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = false,
                            Img = "",
                            Name = "Bsi Son",
                            Phone = "0987662512"
                        },
                        new
                        {
                            CId = 3,
                            Address = "Ha Noi",
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = false,
                            Img = "",
                            Name = "Bsi Bang",
                            Phone = "0987662512"
                        },
                        new
                        {
                            CId = 4,
                            Address = "Ha Noi",
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = false,
                            Img = "",
                            Name = "Bsi Tam",
                            Phone = "0987662512"
                        },
                        new
                        {
                            CId = 7,
                            Address = "Ha Noi",
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = false,
                            Img = "",
                            Name = "Bsi Banh",
                            Phone = "0987662512"
                        },
                        new
                        {
                            CId = 8,
                            Address = "Ha Noi",
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = false,
                            Img = "",
                            Name = "Bsi Vu",
                            Phone = "0987662512"
                        },
                        new
                        {
                            CId = 9,
                            Address = "Ha Noi",
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = false,
                            Img = "",
                            Name = "Bsi Van",
                            Phone = "0987662512"
                        },
                        new
                        {
                            CId = 5,
                            Address = "Ha Noi",
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = false,
                            Img = "",
                            Name = "Y Ta Nho",
                            Phone = "0987662512"
                        },
                        new
                        {
                            CId = 6,
                            Address = "Ha Noi",
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = false,
                            Img = "",
                            Name = "Cashier Trinh",
                            Phone = "0987662512"
                        },
                        new
                        {
                            CId = 10,
                            Address = "Ha Noi",
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = false,
                            Img = "",
                            Name = "Benh nhan A",
                            Phone = "0987662512"
                        },
                        new
                        {
                            CId = 11,
                            Address = "Ha Noi",
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = false,
                            Img = "",
                            Name = "Benh nhan B",
                            Phone = "0987662512"
                        },
                        new
                        {
                            CId = 12,
                            Address = "Ha Noi",
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = false,
                            Img = "",
                            Name = "Benh nhan C",
                            Phone = "0987662512"
                        });
                });

            modelBuilder.Entity("HCS.Domain.Models.ExaminationResult", b =>
                {
                    b.Property<int>("ExamResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamResultId"));

                    b.Property<string>("Conclusion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("ExamResultId");

                    b.HasIndex("PrescriptionId")
                        .IsUnique()
                        .HasFilter("[PrescriptionId] IS NOT NULL");

                    b.ToTable("ExaminationResults");
                });

            modelBuilder.Entity("HCS.Domain.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<int>("CashierId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("InvoiceId");

                    b.HasIndex("CashierId");

                    b.HasIndex("PatientId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("HCS.Domain.Models.MedicalRecord", b =>
                {
                    b.Property<int>("MedicalRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalRecordId"));

                    b.Property<string>("ExamReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExaminationResultId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCheckUp")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MedicalRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousMedicalRecordId")
                        .HasColumnType("int");

                    b.HasKey("MedicalRecordId");

                    b.HasIndex("ExaminationResultId")
                        .IsUnique()
                        .HasFilter("[ExaminationResultId] IS NOT NULL");

                    b.HasIndex("PatientId");

                    b.HasIndex("PreviousMedicalRecordId")
                        .IsUnique()
                        .HasFilter("[PreviousMedicalRecordId] IS NOT NULL");

                    b.ToTable("MedicalRecords");

                    b.HasData(
                        new
                        {
                            MedicalRecordId = 1,
                            ExamReason = "patient 1 mr1",
                            IsCheckUp = false,
                            IsPaid = false,
                            MedicalRecordDate = new DateTime(2024, 1, 10, 15, 27, 13, 618, DateTimeKind.Local).AddTicks(3899),
                            PatientId = 1
                        },
                        new
                        {
                            MedicalRecordId = 2,
                            ExamReason = "patient 2 mr2",
                            IsCheckUp = false,
                            IsPaid = false,
                            MedicalRecordDate = new DateTime(2024, 1, 10, 15, 27, 13, 618, DateTimeKind.Local).AddTicks(3910),
                            PatientId = 2
                        });
                });

            modelBuilder.Entity("HCS.Domain.Models.MedicalRecordCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "MedicalRecordId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("MedicalRecordCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            MedicalRecordId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            MedicalRecordId = 1
                        },
                        new
                        {
                            CategoryId = 1,
                            MedicalRecordId = 2
                        },
                        new
                        {
                            CategoryId = 3,
                            MedicalRecordId = 2
                        });
                });

            modelBuilder.Entity("HCS.Domain.Models.MedicalRecordDoctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId", "MedicalRecordId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("MedicalRecordDoctors");

                    b.HasData(
                        new
                        {
                            DoctorId = 2,
                            MedicalRecordId = 1
                        },
                        new
                        {
                            DoctorId = 3,
                            MedicalRecordId = 1
                        },
                        new
                        {
                            DoctorId = 6,
                            MedicalRecordId = 2
                        },
                        new
                        {
                            DoctorId = 4,
                            MedicalRecordId = 2
                        });
                });

            modelBuilder.Entity("HCS.Domain.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("Allergieshistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("BloodPressure")
                        .HasColumnType("tinyint");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<byte?>("Height")
                        .HasColumnType("tinyint");

                    b.Property<string>("ServiceDetailName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Weight")
                        .HasColumnType("tinyint");

                    b.HasKey("PatientId");

                    b.HasIndex("ContactId")
                        .IsUnique()
                        .HasFilter("[ContactId] IS NOT NULL");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            Allergieshistory = "None",
                            BloodGroup = "A",
                            BloodPressure = (byte)128,
                            ContactId = 10,
                            Height = (byte)157,
                            ServiceDetailName = "None",
                            Weight = (byte)50
                        },
                        new
                        {
                            PatientId = 2,
                            Allergieshistory = "None",
                            BloodGroup = "A",
                            BloodPressure = (byte)128,
                            ContactId = 11,
                            Height = (byte)157,
                            ServiceDetailName = "None",
                            Weight = (byte)50
                        },
                        new
                        {
                            PatientId = 3,
                            Allergieshistory = "None",
                            BloodGroup = "A",
                            BloodPressure = (byte)128,
                            ContactId = 12,
                            Height = (byte)157,
                            ServiceDetailName = "None",
                            Weight = (byte)50
                        });
                });

            modelBuilder.Entity("HCS.Domain.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrescriptionId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("HCS.Domain.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Doctor"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Cashier"
                        },
                        new
                        {
                            RoleId = 4,
                            RoleName = "Nurse"
                        });
                });

            modelBuilder.Entity("HCS.Domain.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.HasKey("ServiceId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            IsDeleted = false,
                            Price = 0.0,
                            ServiceName = "Tiêm vaccine",
                            ServiceTypeId = 1
                        },
                        new
                        {
                            ServiceId = 2,
                            IsDeleted = false,
                            Price = 0.0,
                            ServiceName = "Khám mắt",
                            ServiceTypeId = 1
                        },
                        new
                        {
                            ServiceId = 3,
                            IsDeleted = false,
                            Price = 0.0,
                            ServiceName = "Khám đại tràng",
                            ServiceTypeId = 2
                        },
                        new
                        {
                            ServiceId = 4,
                            IsDeleted = false,
                            Price = 0.0,
                            ServiceName = "Siêu âm màu",
                            ServiceTypeId = 2
                        },
                        new
                        {
                            ServiceId = 5,
                            IsDeleted = false,
                            Price = 0.0,
                            ServiceName = "Xét nghiệm máu",
                            ServiceTypeId = 3
                        },
                        new
                        {
                            ServiceId = 6,
                            IsDeleted = false,
                            Price = 0.0,
                            ServiceName = "Phẫu thuật cắt ruột thừa",
                            ServiceTypeId = 3
                        },
                        new
                        {
                            ServiceId = 7,
                            IsDeleted = false,
                            Price = 0.0,
                            ServiceName = "Tiêm vaccine cúm",
                            ServiceTypeId = 4
                        },
                        new
                        {
                            ServiceId = 8,
                            IsDeleted = false,
                            Price = 0.0,
                            ServiceName = "Khám tai mũi họng",
                            ServiceTypeId = 4
                        },
                        new
                        {
                            ServiceId = 9,
                            IsDeleted = false,
                            Price = 0.0,
                            ServiceName = "Khám dạ dày",
                            ServiceTypeId = 5
                        },
                        new
                        {
                            ServiceId = 10,
                            IsDeleted = false,
                            Price = 0.0,
                            ServiceName = "Siêu âm",
                            ServiceTypeId = 5
                        },
                        new
                        {
                            ServiceId = 11,
                            IsDeleted = false,
                            Price = 0.0,
                            ServiceName = "Xét nghiệm nước tiểu",
                            ServiceTypeId = 6
                        },
                        new
                        {
                            ServiceId = 12,
                            IsDeleted = false,
                            Price = 0.0,
                            ServiceName = "Phẫu thuật nối gân tay",
                            ServiceTypeId = 6
                        });
                });

            modelBuilder.Entity("HCS.Domain.Models.ServiceMedicalRecord", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ServiceId", "MedicalRecordId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("ServiceMedicalRecords");
                });

            modelBuilder.Entity("HCS.Domain.Models.ServiceType", b =>
                {
                    b.Property<int>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceTypeId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ServiceTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceTypeId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            ServiceTypeId = 1,
                            CategoryId = 1,
                            IsDeleted = false,
                            ServiceTypeName = "Khám tổng quát"
                        },
                        new
                        {
                            ServiceTypeId = 2,
                            CategoryId = 1,
                            IsDeleted = false,
                            ServiceTypeName = "Khám chuyên khoa"
                        },
                        new
                        {
                            ServiceTypeId = 3,
                            CategoryId = 2,
                            IsDeleted = false,
                            ServiceTypeName = "Khám nội soi"
                        },
                        new
                        {
                            ServiceTypeId = 4,
                            CategoryId = 2,
                            IsDeleted = false,
                            ServiceTypeName = "Chẩn đoán hình ảnh"
                        },
                        new
                        {
                            ServiceTypeId = 5,
                            CategoryId = 3,
                            IsDeleted = false,
                            ServiceTypeName = "Xét nghiệm"
                        },
                        new
                        {
                            ServiceTypeId = 6,
                            CategoryId = 3,
                            IsDeleted = false,
                            ServiceTypeName = "Phẫu thuật"
                        });
                });

            modelBuilder.Entity("HCS.Domain.Models.SuppliesPrescription", b =>
                {
                    b.Property<int>("SId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SId"));

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SupplyId")
                        .HasColumnType("int");

                    b.HasKey("SId");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("SupplyId");

                    b.ToTable("SuppliesPrescriptions");
                });

            modelBuilder.Entity("HCS.Domain.Models.SuppliesType", b =>
                {
                    b.Property<int>("SuppliesTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SuppliesTypeId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SuppliesTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SuppliesTypeId");

                    b.ToTable("SuppliesTypes");
                });

            modelBuilder.Entity("HCS.Domain.Models.Supply", b =>
                {
                    b.Property<int>("SId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SId"));

                    b.Property<string>("Distributor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Exp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Inputday")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("SName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuppliesTypeId")
                        .HasColumnType("int");

                    b.Property<short>("UnitInStock")
                        .HasColumnType("smallint");

                    b.Property<string>("Uses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SId");

                    b.HasIndex("SuppliesTypeId");

                    b.ToTable("Supplies");
                });

            modelBuilder.Entity("HCS.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContactId")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            ContactId = 1,
                            Email = "vkhoa871@gmail.com",
                            Password = "d0c406e82877aacad00415ca64f821e9",
                            RoleId = 1,
                            Status = true
                        },
                        new
                        {
                            UserId = 2,
                            CategoryId = 1,
                            ContactId = 2,
                            Email = "sonnk1@gmail.com",
                            Password = "d0c406e82877aacad00415ca64f821e9",
                            RoleId = 2,
                            Status = true
                        },
                        new
                        {
                            UserId = 3,
                            CategoryId = 2,
                            ContactId = 3,
                            Email = "doctor3@gmail.com",
                            Password = "d0c406e82877aacad00415ca64f821e9",
                            RoleId = 2,
                            Status = true
                        },
                        new
                        {
                            UserId = 4,
                            CategoryId = 3,
                            ContactId = 4,
                            Email = "doctor4@gmail.com",
                            Password = "d0c406e82877aacad00415ca64f821e9",
                            RoleId = 2,
                            Status = true
                        },
                        new
                        {
                            UserId = 5,
                            CategoryId = 3,
                            ContactId = 7,
                            Email = "doctor5@gmail.com",
                            Password = "d0c406e82877aacad00415ca64f821e9",
                            RoleId = 2,
                            Status = true
                        },
                        new
                        {
                            UserId = 6,
                            CategoryId = 1,
                            ContactId = 8,
                            Email = "doctor6@gmail.com",
                            Password = "d0c406e82877aacad00415ca64f821e9",
                            RoleId = 2,
                            Status = true
                        },
                        new
                        {
                            UserId = 7,
                            CategoryId = 2,
                            ContactId = 9,
                            Email = "doctor7@gmail.com",
                            Password = "d0c406e82877aacad00415ca64f821e9",
                            RoleId = 2,
                            Status = true
                        },
                        new
                        {
                            UserId = 8,
                            ContactId = 5,
                            Email = "yta1@gmail.com",
                            Password = "d0c406e82877aacad00415ca64f821e9",
                            RoleId = 4,
                            Status = true
                        },
                        new
                        {
                            UserId = 9,
                            ContactId = 6,
                            Email = "cashier1@gmail.com",
                            Password = "d0c406e82877aacad00415ca64f821e9",
                            RoleId = 3,
                            Status = true
                        });
                });

            modelBuilder.Entity("HCS.Domain.Models.ExaminationResult", b =>
                {
                    b.HasOne("HCS.Domain.Models.Prescription", "Prescription")
                        .WithOne("ExaminationResult")
                        .HasForeignKey("HCS.Domain.Models.ExaminationResult", "PrescriptionId");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("HCS.Domain.Models.Invoice", b =>
                {
                    b.HasOne("HCS.Domain.Models.User", "Cashier")
                        .WithMany("Invoices")
                        .HasForeignKey("CashierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCS.Domain.Models.Patient", "Patient")
                        .WithMany("Invoices")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cashier");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HCS.Domain.Models.MedicalRecord", b =>
                {
                    b.HasOne("HCS.Domain.Models.ExaminationResult", "ExaminationResult")
                        .WithOne("MedicalRecord")
                        .HasForeignKey("HCS.Domain.Models.MedicalRecord", "ExaminationResultId");

                    b.HasOne("HCS.Domain.Models.Patient", "Patient")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HCS.Domain.Models.MedicalRecord", "PreviousMedicalRecordNavigation")
                        .WithOne()
                        .HasForeignKey("HCS.Domain.Models.MedicalRecord", "PreviousMedicalRecordId");

                    b.Navigation("ExaminationResult");

                    b.Navigation("Patient");

                    b.Navigation("PreviousMedicalRecordNavigation");
                });

            modelBuilder.Entity("HCS.Domain.Models.MedicalRecordCategory", b =>
                {
                    b.HasOne("HCS.Domain.Models.Category", "Category")
                        .WithMany("MedicalRecordCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HCS.Domain.Models.MedicalRecord", "MedicalRecord")
                        .WithMany("MedicalRecordCategories")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("HCS.Domain.Models.MedicalRecordDoctor", b =>
                {
                    b.HasOne("HCS.Domain.Models.User", "Doctor")
                        .WithMany("MedicalRecordDoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCS.Domain.Models.MedicalRecord", "MedicalRecord")
                        .WithMany("MedicalRecordDoctors")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("HCS.Domain.Models.Patient", b =>
                {
                    b.HasOne("HCS.Domain.Models.Contact", "Contact")
                        .WithOne("Patient")
                        .HasForeignKey("HCS.Domain.Models.Patient", "ContactId");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("HCS.Domain.Models.Service", b =>
                {
                    b.HasOne("HCS.Domain.Models.ServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("HCS.Domain.Models.ServiceMedicalRecord", b =>
                {
                    b.HasOne("HCS.Domain.Models.Invoice", "Invoice")
                        .WithMany("ServiceMedicalRecords")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("HCS.Domain.Models.MedicalRecord", "MedicalRecord")
                        .WithMany("ServiceMedicalRecords")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HCS.Domain.Models.Service", "Service")
                        .WithMany("ServiceMedicalRecords")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("MedicalRecord");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("HCS.Domain.Models.ServiceType", b =>
                {
                    b.HasOne("HCS.Domain.Models.Category", "Category")
                        .WithMany("ServiceTypes")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("HCS.Domain.Models.SuppliesPrescription", b =>
                {
                    b.HasOne("HCS.Domain.Models.Prescription", "Prescription")
                        .WithMany("SuppliesPrescriptions")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HCS.Domain.Models.Supply", "Supply")
                        .WithMany("SuppliesPrescriptions")
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prescription");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("HCS.Domain.Models.Supply", b =>
                {
                    b.HasOne("HCS.Domain.Models.SuppliesType", "SuppliesType")
                        .WithMany("Supplies")
                        .HasForeignKey("SuppliesTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SuppliesType");
                });

            modelBuilder.Entity("HCS.Domain.Models.User", b =>
                {
                    b.HasOne("HCS.Domain.Models.Category", "Category")
                        .WithMany("Doctors")
                        .HasForeignKey("CategoryId");

                    b.HasOne("HCS.Domain.Models.Contact", "Contact")
                        .WithOne("User")
                        .HasForeignKey("HCS.Domain.Models.User", "ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HCS.Domain.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Contact");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("HCS.Domain.Models.Category", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("MedicalRecordCategories");

                    b.Navigation("ServiceTypes");
                });

            modelBuilder.Entity("HCS.Domain.Models.Contact", b =>
                {
                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCS.Domain.Models.ExaminationResult", b =>
                {
                    b.Navigation("MedicalRecord")
                        .IsRequired();
                });

            modelBuilder.Entity("HCS.Domain.Models.Invoice", b =>
                {
                    b.Navigation("ServiceMedicalRecords");
                });

            modelBuilder.Entity("HCS.Domain.Models.MedicalRecord", b =>
                {
                    b.Navigation("MedicalRecordCategories");

                    b.Navigation("MedicalRecordDoctors");

                    b.Navigation("ServiceMedicalRecords");
                });

            modelBuilder.Entity("HCS.Domain.Models.Patient", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("HCS.Domain.Models.Prescription", b =>
                {
                    b.Navigation("ExaminationResult")
                        .IsRequired();

                    b.Navigation("SuppliesPrescriptions");
                });

            modelBuilder.Entity("HCS.Domain.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("HCS.Domain.Models.Service", b =>
                {
                    b.Navigation("ServiceMedicalRecords");
                });

            modelBuilder.Entity("HCS.Domain.Models.ServiceType", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("HCS.Domain.Models.SuppliesType", b =>
                {
                    b.Navigation("Supplies");
                });

            modelBuilder.Entity("HCS.Domain.Models.Supply", b =>
                {
                    b.Navigation("SuppliesPrescriptions");
                });

            modelBuilder.Entity("HCS.Domain.Models.User", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("MedicalRecordDoctors");
                });
#pragma warning restore 612, 618
        }
    }
}
